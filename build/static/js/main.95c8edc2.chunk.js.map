{"version":3,"sources":["services/persons.js","components/Filter.js","components/Button.js","components/PersonForm.js","components/Persons.js","components/Notification.js","constants/MessageType.js","App.js","index.js"],"names":["baseUrl","newObj","axios","post","then","response","data","id","delete","changedObj","put","get","Filter","props","value","onChange","Button","onClick","type","className","text","PersonForm","onSubmit","newName","onNewName","newNumber","onNewNumber","Person","name","number","Persons","list","map","person","Notification","detail","MESSAGE_TYPE","defaultMessage","App","useState","persons","setPersons","setNewName","setNewNumber","filter","setFilter","message","setMessage","useEffect","personsService","resetInputs","timeoutMessage","ms","setTimeout","listToShow","length","toUpperCase","includes","event","target","preventDefault","undefined","find","concat","successMessage","window","confirm","found","catch","error","errorMessage","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95c8edc2.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\nimport axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n    const promise = axios.get(baseUrl);\r\n    return promise.then(response => response.data);\r\n}\r\n\r\nconst create = newObj => {\r\n    const promise = axios.post(baseUrl, newObj);\r\n    return promise.then(response => response.data);\r\n}\r\n\r\nconst deletePerson = id => {\r\n    return axios.delete(`${baseUrl}/${id}`);\r\n}\r\n\r\nconst change = (id, changedObj) => {\r\n  const promise = axios.put(`${baseUrl}/${id}`, changedObj);\r\n  return promise.then(response => response.data);\r\n}\r\n\r\nexport default {\r\n  create,\r\n  deletePerson,\r\n  change,\r\n  getAll\r\n};","const Filter = (props) => {\r\n  return (\r\n    <>\r\n      filter shown with\r\n      <input value={props.value} onChange={props.onChange} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;","import PropTypes from \"prop-types\";\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <button\r\n      onClick={props.onClick}\r\n      type={props.type}\r\n      className={props.className}\r\n    >\r\n      {props.text}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  className: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  type: PropTypes.string,\r\n};\r\n\r\nexport default Button;\r\n","import Button from \"./Button\";\r\n\r\nconst PersonForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.onSubmit}>\r\n      <div>\r\n        name: <input value={props.newName} onChange={props.onNewName} />\r\n      </div>\r\n      <div>\r\n        number: <input value={props.newNumber} onChange={props.onNewNumber} />\r\n      </div>\r\n      <div>\r\n        <Button type=\"submit\" text=\"add\"/>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\n\r\nexport default PersonForm;\r\n","import Button from \"./Button\";\r\n\r\nconst Persons = (props) => {\r\n  return (\r\n    <ul>\r\n      {props.list.map((person) => (\r\n        <li key={person.id}>\r\n          <Person name={person.name} number={person.number} />\r\n          <Button\r\n            onClick={() => props.onClick(person.id, person.name)}\r\n            text=\"delete\"\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst Person = (props) => {\r\n  return (\r\n    <>\r\n      {props.name} {props.number}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","const Notification = ({ detail }) => {\r\n  if (detail.text === null) {\r\n    return null;\r\n  }\r\n  return detail.type === \"success\" ? (\r\n    <div className=\"success\">{detail.text}</div>\r\n  ) : detail.type === \"error\" ? (\r\n    <div className=\"error\">{detail.text}</div>\r\n  ) : null;\r\n};\r\n\r\nexport default Notification;","export const MESSAGE_TYPE = {\r\n    SUCCESS: \"success\",\r\n    ERROR: \"error\",\r\n    UNSET: \"\"\r\n}","import React, { useState, useEffect } from \"react\";\nimport personsService from \"./services/persons\";\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Persons\";\nimport Notification from \"./components/Notification\";\nimport { MESSAGE_TYPE } from \"./constants/MessageType\";\n\nconst defaultMessage = {\n  text: null,\n  type: MESSAGE_TYPE.UNSET,\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [message, setMessage] = useState(defaultMessage);\n\n  useEffect(() => {\n    personsService.getAll().then((persons) => setPersons(persons));\n  }, []);\n\n  const onNewName = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const onNewNumber = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const onFilterChange = (event) => {\n    setFilter(event.target.value);\n  };\n\n  const resetInputs = () => {\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  const onDelete = (id, name) => {\n    const confirmed = window.confirm(`Delete ${name}?`);\n    confirmed &&\n      personsService.deletePerson(id) &&\n      setPersons(persons.filter((person) => person.id !== id));\n  };\n\n  const timeoutMessage = (ms = 5000) => {\n    return setTimeout(() => {\n      setMessage(defaultMessage);\n    }, ms);\n  };\n\n  const addNewPerson = (event) => {\n    event.preventDefault();\n\n    if (persons.find((person) => person.name === newName) === undefined) {\n      const newPerson = {\n        name: newName,\n        number: newNumber,\n      };\n      personsService.create(newPerson).then((data) => {\n        setPersons(persons.concat(data));\n        const successMessage = {\n          text: `Added ${newName}`,\n          type: MESSAGE_TYPE.SUCCESS,\n        };\n        setMessage(successMessage);\n        timeoutMessage();\n        resetInputs();\n      });\n    } else if (\n      persons.find(\n        (person) => person.name === newName && person.number !== newNumber\n      )\n    ) {\n      const confirmed = window.confirm(\n        `${newName} is already added to phonebook, replace the old number with a new one?`\n      );\n      if (confirmed) {\n        const found = persons.find(\n          (person) => person.name === newName && person.number !== newNumber\n        );\n        const changedObj = { ...found, number: newNumber };\n        personsService\n          .change(found.id, changedObj)\n          .then((newObj) => {\n            setPersons(\n              persons.map((person) =>\n                person.id !== found.id ? person : newObj\n              )\n            );\n            const successMessage = {\n              text: `Changed ${newName}'s number to ${newNumber}`,\n              type: MESSAGE_TYPE.SUCCESS,\n            };\n            setMessage(successMessage);\n            timeoutMessage();\n            resetInputs();\n          })\n          .catch((error) => {\n            const errorMessage = {\n              text: `Contact ${newName} has already removed from server`,\n              type: MESSAGE_TYPE.ERROR,\n            };\n            setMessage(errorMessage);\n            timeoutMessage();\n          });\n      }\n    } else {\n      alert(`${newName} is already added to phonebook`);\n    }\n  };\n\n  const listToShow =\n    filter.length > 0\n      ? persons.filter((person) =>\n          person.name.toUpperCase().includes(filter.toUpperCase())\n        )\n      : persons;\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification detail={message} />\n      <Filter value={filter} onChange={onFilterChange} />\n      <h3>add a new</h3>\n      <PersonForm\n        onSubmit={addNewPerson}\n        newName={newName}\n        onNewName={onNewName}\n        newNumber={newNumber}\n        onNewNumber={onNewNumber}\n      />\n      <h3>Numbers</h3>\n      <Persons list={listToShow} onClick={onDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}